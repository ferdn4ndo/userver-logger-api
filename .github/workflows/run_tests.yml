name: Run The Test Suite

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - '**.md'
    tags-ignore:
      - '**'
  pull_request:
    paths-ignore:
      - '**.md'

jobs: # Docs: <https://git.io/JvxXE>
  check-gitleaks:
    name: Check for code leaks with GitLeaks
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for GitLeaks
        uses: zricethezav/gitleaks-action@v1.6.0 # Action page: <https://github.com/zricethezav/gitleaks-action>

  check-codebase-quality:
    name: Check codebase quality
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Setup golangci-lint
        uses: reviewdog/action-golangci-lint@v2

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1

      - name: Run linter (gofumpt -s) with reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go install mvdan.cc/gofumpt@v0.2.0
          gofumpt -e -d . | \
          reviewdog -name="gofumpt" -f=diff -f.diff.strip=0 -reporter=github-pr-review

  build-image:
    name: Build docker image
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Build docker image
        run: docker build -f ./Dockerfile --tag userver-logger-api:local .

      - name: Save docker image
        run: docker save userver-logger-api:local > ./docker-image.tar

      - name: Upload docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-docker-image
          path: ./docker-image.tar
          retention-days: 1

  scan-image-healthcheck-and-uts:
    name: Scan image, health check and UTs
    runs-on: ubuntu-20.04
    needs:
      - build-image
    env:
      CONTAINER_NAME: userver-logger-api
      AUTH_USERNAME: test
      AUTH_PASSWORD: test
      DATA_FOLDER: /home/runner/work/userver-logger-api/userver-logger-api/data
      LOG_FILES_FOLDER: /home/runner/work/userver-logger-api/userver-logger-api/data
      FIXTURE_FOLDER: /home/runner/work/userver-logger-api/userver-logger-api/fixture
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download built docker image
        uses: actions/download-artifact@v3
        with:
          name: test-docker-image
          path: .artifact

      - name: Prepare image to run
        working-directory: .artifact
        run: docker load < docker-image.tar

      - name: Scan image
        uses: anchore/scan-action@v3 # action page: <https://github.com/anchore/scan-action>
        with:
          image: userver-logger-api:local
          fail-build: true
          severity-cutoff: low # negligible, low, medium, high or critical

      - name: Creating directories
        run: mkdir -p "$LOG_FILES_FOLDER"

      - name: Copying sample log file
        run: curl -sL https://raw.githubusercontent.com/ferdn4ndo/userver-logger-api/main/fixture/sample-app.log > "$LOG_FILES_FOLDER/sample-app.log"

      - name: Try to run container
        run: docker run -d --rm -p 5555:5555 -v "$LOG_FILES_FOLDER":/log_files --env BASIC_AUTH_USERNAME="$AUTH_USERNAME" --env BASIC_AUTH_PASSWORD="$AUTH_PASSWORD" --env DATA_FOLDER="$DATA_FOLDER" --name "$CONTAINER_NAME" "$CONTAINER_NAME":local

      - name: Wait for healthy status
        run: while [ "`docker inspect -f {{.State.Health.Status}} $CONTAINER_NAME`" != "healthy" ]; do sleep 5; done

      - name: Execute test call
        run: curl http://localhost:5555/health

      - name: Run UTs with coverage check
        run: docker exec -i "$CONTAINER_NAME" sh -c "./scripts/run_all_tests_with_coverage.sh"

      - name: Copy coverage report file
        run: docker cp "$CONTAINER_NAME":"$DATA_FOLDER/coverage.txt" ./coverage.txt

      - name: View report
        run: cat ./coverage.txt

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          flags: unittests
          name: codecov-userver-logger-api
          fail_ci_if_error: true
          verbose: true
